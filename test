import React, { useEffect, useState } from "react";
import { AnimatePresence, motion, useReducedMotion } from "framer-motion";
import { FiPlus, FiX, FiPlay } from "react-icons/fi";
import ReactPlayer from "react-player";
import { fetchMovieVideos } from "../../service/apiService";

type MovieModalProps = {
  movie: Movie,
  open: boolean,
  onClose: () => void,
  autoPlay: boolean,
  genres: Genre[],
  likedMovies: Set<number>,
  toggleLike: (movieId: number) => void,
};

type Movie = {
  id: number,
  title: string,
  backdrop_path: string,
  release_date: string,
  vote_average: number,
  overview: string,
  genre_ids: number[],
};

type Genre = {
  id: number,
  name: string,
};

const MovieModal: React.FC<MovieModalProps> = ({
  movie,
  open,
  onClose,
  autoPlay,
  genres,
  likedMovies,
  toggleLike,
}) => {
  const [isTrailerPlaying, setIsTrailerPlaying] = useState(false);
  const [videoKey, setVideoKey] = (useState < string) | (null > null);
  const [watchlist, setWatchlist] = useState < Set < number >> new Set();
  const shouldReduceMotion = useReducedMotion();

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === "Escape") {
        onClose();
      }
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [onClose]);

  useEffect(() => {
    const loadTrailer = async () => {
      try {
        const videos = await fetchMovieVideos(movie.id);
        const trailer = videos.find(
          (video) => video.type === "Trailer" && video.site === "YouTube"
        );
        setVideoKey(trailer ? trailer.key : null);
      } catch (error) {
        console.error("Failed to load trailer:", error);
      }
    };
    if (isTrailerPlaying) loadTrailer();
  }, [isTrailerPlaying, movie.id]);

  if (!open) return null;

  const handlePlayTrailer = () => setIsTrailerPlaying(true);

  const toggleWatchlist = (movieId: number) => {
    setWatchlist((prev) => {
      const updatedWatchlist = new Set(prev);
      if (updatedWatchlist.has(movieId)) {
        updatedWatchlist.delete(movieId);
      } else {
        updatedWatchlist.add(movieId);
      }
      return updatedWatchlist;
    });
  };

  return (
    <div
      role="dialog"
      aria-modal="true"
      aria-labelledby="movie-title"
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-lg"
      onClick={onClose}
    >
      <motion.div
        className="relative w-full max-w-3xl rounded-3xl glass-effect-trend overflow-hidden"
        onClick={(e) => e.stopPropagation()}
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.9 }}
        transition={{ duration: 0.5, ease: "easeOut" }}
      >
        {/* Close Button */}
        <motion.button
          ref={closeButtonRef}
          onClick={onClose}
          className="absolute top-16 right-16 z-60 text-[#ffb1b1] hover:text-white transition-transform duration-300"
          aria-label="Close modal"
          whileHover={{ scale: 1.2 }}
          whileTap={{ scale: 0.9 }}
        >
          <FiX className="w-6 h-6" />
        </motion.button>

        {/* Background Image or Trailer */}
        <div className="relative w-full h-72 rounded-t-3xl overflow-hidden">
          {isTrailerPlaying && videoKey ? (
            <ReactPlayer
              url={`https://www.youtube.com/watch?v=${videoKey}`}
              playing={autoPlay}
              controls
              width="100%"
              height="100%"
              className="react-player"
              config={{ youtube: { playerVars: { autoplay: 1 } } }}
            />
          ) : (
            <>
              <img
                src={`https://image.tmdb.org/t/p/original${movie.backdrop_path}`}
                alt={movie.title}
                className="w-full h-full object-cover"
                loading="lazy"
                onError={(e) =>
                  (e.currentTarget.src = "/assets/fallback-image.jpg")
                }
              />
              <div className="absolute inset-0 bg-gradient-to-t from-[#2c2c2c]/80 via-transparent to-[#1a1a1a]/60"></div>
              <motion.button
                onClick={handlePlayTrailer}
                className="absolute inset-0 flex items-center justify-center text-white text-5xl opacity-80 hover:opacity-100 transition-opacity bg-black/50 rounded-full shadow-lg hover:scale-110"
                aria-label={`Play trailer for ${movie.title}`}
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.95 }}
              >
                <FiPlay className="w-14 h-14" />
              </motion.button>
            </>
          )}
        </div>

        {/* Content Section */}
        <div className="py-6 glass-effect-trend rounded-b-3xl text-center md:text-left">
          <AnimatePresence>
            {/* Movie Title */}
            <motion.h2
              id="movie-title"
              className="text-3xl md:text-4xl lg:text-5xl font-bold tracking-wide text-[#dcdcdc] pt-8 pb-8 hover:scale-105 transition-transform duration-300"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
            >
              {movie.title}
            </motion.h2>

            {/* Release Date and Rating */}
            <motion.div
              className="flex flex-col md:flex-row gap-8 mb-8 items-center justify-center md:justify-start"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, ease: "easeOut" }}
            >
              {/* Release Date */}
              <div className="flex flex-col items-center md:items-start ml-2">
                <span className="text-xs md:text-sm font-light text-[#ffb1b1]/80">
                  Release Date
                </span>
                <span className="text-base text-[#e0e0e0]">
                  {new Date(movie.release_date).toLocaleDateString(undefined, {
                    year: "numeric",
                    month: "short",
                    day: "numeric",
                  })}
                </span>
              </div>

              {/* User Rating */}
              <div className="flex flex-col items-center md:items-start">
                <span className="text-xs md:text-sm font-light text-[#ffb1b1]/80">
                  User Rating
                </span>
                <span className="text-base text-[#e0e0e0]">
                  {movie.vote_average.toFixed(1)} / 10
                </span>
              </div>

              {/* Watchlist Button */}
              <div className="flex flex-1 justify-end"></div>
            </motion.div>

            {/* Overview Text */}
            <motion.p
              className="mt-8 text-base md:text-lg lg:text-xl text-gray-200 mb-6 leading-relaxed tracking-wide drop-shadow-md"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
            >
              {movie.overview || "No overview available for this movie."}
            </motion.p>
          </AnimatePresence>
        </div>
      </motion.div>
    </div>
  );
};

export default MovieModal;
